from pathlib import Path
import json
import gurobipy as gp
from gurobipy import GRB
import numpy as np
import math

class Constant:
    """
    Turning time: After normalizing grid size to 1 and velcity to 1.
    Additional assumption: Turning time for acute angles 
    is twice as long as that for obtuse angles.
    """
    # Based on information in the video "The Fastest Maze-Solving Competition On Earth"
    # of channel Veritasium, from 10:40 to 11:20.
    acute = 7.5
    obtuse_or_right = 3.75

# Get points on a segment, for first-stage filtering of redundant vertices,
# among other purposes
def get_points_between(point1, point2):
    """
    Return list of all integral points between 'point1' and 'point2'
    """
    a1, b1, a2, b2 = point1[0], point1[1], point2[0], point2[1]
    a, b = a2 - a1, b2 - b1
    if b > 0 or (b == 0 and a > 0):
        d = math.gcd(a, b)
        i, j = int(a/d), int(b/d)
        return [[a1 + num * i, b1 + num * j] for num in range(0, d + 1)]
    else:
        a, b = -a, -b
        d = math.gcd(a, b)
        i, j = int(a/d), int(b/d)
        return [[a2 + num * i, b2 + num * j] for num in range(0, d + 1)]

# Get maximum number of vertices for a feasible path of given maze
def get_maximum_number_of_vertices(size, index):
    """
    Get maximum number of vertices for a feasible path of given maze.
    """
    grid_path = Path(__file__).parent/"Samples"/f"Size{size}"/f"sample{index}.json"
    with open(grid_path, "r") as f:
        edges = json.load(f)["edges"]
    redundant_points = set()
    # Filter redundant points from points_list
    for edge in edges:
        points_to_remove = get_points_between(edge[0], edge[1])
        for point in points_to_remove:
            # add to redundant_points
            redundant_points.add(tuple(point))
    redundant_points = list(redundant_points)
    return size**2 - len(redundant_points)

# H√†m gi·∫£i m√™ cung v·ªõi s·ªë b∆∞·ªõc c·ªë ƒë·ªãnh ch·ªçn tr∆∞·ªõc
def solve_maze_with_given_step(size, index, step, status = "optimal"):
    """
    Solve given maze for a solution with fixed number of steps, optimal
    if 'status' = "optimal", else an arbitrary feasible solution.
    """
    # Thi·∫øt l·∫≠p m√¥ h√¨nh
    model = gp.Model()

    # Look for any feasible solution if 'status' = "feasible"
    if status == "feasible": model.params.SolutionLimit = 1

    nodes_path = Path(__file__).parent/"Unreachable_nodes"/f"Size{size}"/f"sample{index}.json"
    grid_path = Path(__file__).parent/"Samples"/f"Size{size}"/f"sample{index}.json"
    with open(nodes_path, "r") as f:
        cac_dinh = json.load(f)
    with open(grid_path, "r") as f:
        maze = json.load(f)
    start = maze["start"]
    target = maze["target"]

    # Get edges
    edges = maze["edges"]

    redundant_points = set()
    points_list = [[i, j] for i in range(1, size + 1) for j in range(1, size + 1)]
    # Filter redundant points from points_list
    for edge in edges:
        points_to_remove = get_points_between(edge[0], edge[1])
        for point in points_to_remove:
            # remove from points_list
            try:
                points_list.remove(point)
            except:
                pass

            # add to redundant_points
            redundant_points.add(tuple(point))
    redundant_points = list(redundant_points)
    
    # Check validity of number of steps
    max_step = size**2 - len(redundant_points)
    if step > max_step: 
        raise ValueError(f"S·ªë b∆∞·ªõc v∆∞·ª£t qu√° s·ªë b∆∞·ªõc t·ªëi ƒëa: {max_step}")

    n = size
    M = 2*n**2 + 10
    N = step

    x = np.empty((n+1, n+1, N+1), dtype=object)
    for i in range(1,n+1):
        for j in range(1,n+1):
            for k in range(1, N+1):
                x[i,j,k] = model.addVar(vtype=GRB.BINARY)

    # T·∫•t c·∫£ c√°c ƒë·ªânh trong redundant_points ƒë·ªÅu b·∫±ng 0
    for k in range(1, N + 1):
        for i, j in redundant_points:
            model.addConstr(x[i, j, k] == 0)

    # T√≠nh t·ªça ƒë·ªô a, b c·ªßa ƒë·ªânh th·ª© k
    a = np.empty((N+1), dtype=object)
    b = np.empty((N+1), dtype=object)
    for k in range(1, N+1):
        a[k] = model.addVar(lb=0, ub=n, vtype= GRB.CONTINUOUS)
        model.addConstr(gp.quicksum([x[i, j, k]*i for i in range(1,n+1) for j in range(1,n+1)]) == a[k])
        b[k] = model.addVar(lb=0, ub=n, vtype= GRB.CONTINUOUS)
        model.addConstr(gp.quicksum([x[i, j, k]*j for i in range(1,n+1) for j in range(1,n+1)]) == b[k])

    # Bi·∫øn ki·ªÉm tra xem ƒë·ªânh th·ª© k c√≥ ƒë∆∞·ª£c ch·ªçn hay kh√¥ng
    count = np.empty(N + 1, dtype=object)
    for k in range(1, N + 1):
        count[k] = model.addVar(vtype=GRB.BINARY)
        model.addConstr(count[k] == gp.quicksum([x[i, j, k] for i, j in points_list]))

    # T√≠nh qu√£ng ƒë∆∞·ªùng
    # Kh√¥ng nh√¢n ƒë∆∞·ª£c ba l·∫ßn
    step_length_squared = np.empty(N, dtype=object)
    true_step_length_squared = np.empty(N, dtype=object)
    sqrt_var = np.empty(N, dtype=object)
    for k in range(1, N):
        step_length_squared[k] = model.addVar(lb=0, ub=GRB.INFINITY, vtype=GRB.INTEGER)
        model.addConstr(step_length_squared[k] == (a[k+1] - a[k])**2 + (b[k+1] - b[k])**2)
        true_step_length_squared[k] = model.addVar(lb=0, ub=GRB.INFINITY, vtype=GRB.INTEGER)
        model.addConstr(true_step_length_squared[k] == step_length_squared[k] * count[k + 1])
        sqrt_var[k] = model.addVar(lb=0, ub=GRB.INFINITY, vtype=GRB.CONTINUOUS, name="sqrt_var")
        model.addConstr(sqrt_var[k] * sqrt_var[k] == true_step_length_squared[k], "sqrt_constr")
    sqrt = gp.quicksum([sqrt_var[k] for k in range(1, N)])

    # Danh s√°ch c√°c v√©c-t∆° gi·ªØa hai ƒë·ªânh li√™n ti·∫øp
    vectors_list = []
    for k in range(1, N):
        vectors_list.append([a[k + 1] - a[k], b[k + 1] - b[k]])

    # D√πng lu√¥n t·ª´ vectors_list, tr√°nh t√≠nh l·∫°i nhi·ªÅu l·∫ßn trong h√†m dot_product.
    # H∆°n n·ªØa vectors_list c√≤n ƒë∆∞·ª£c d√πng trong ƒëi·ªÅu ki·ªán kh√¥ng th·∫≥ng h√†ng ·ªü sau.
    total_angle_cost = 0
    for i in range(2, N):
        vector1, vector2 = vectors_list[i - 2], vectors_list[i - 1]
        dot_product = vector1[0]*vector2[0] + vector1[1]*vector2[1]
        b1 = model.addVar(vtype = GRB.BINARY, name = "b1") # = 1 n·∫øu dot_product > 0, = 0 n·∫øu ng∆∞·ª£c l·∫°i
        b2 = model.addVar(vtype = GRB.BINARY, name = "b2") # = 1 n·∫øu dot_product < 0, = 0 n·∫øu ng∆∞·ª£c l·∫°i
        b3 = model.addVar(vtype = GRB.BINARY, name = "b3") # = 1 n·∫øu dot_product = 0

        # Ch·ªâ ch√≠nh x√°c ho√° b1, b2. ƒêi·ªÅu ki·ªán sau s·∫Ω l√†m ch√≠nh x√°c b3.
        model.addConstr(b1+b2+b3 == 1)
        model.addConstr(dot_product <= M*b1)
        model.addConstr(dot_product >= (M + 1)*(b1 - 1) + 1)
        model.addConstr(dot_product >= -M*b2)
        model.addConstr(dot_product <= (M + 1)*(1 - b2) - 1)

        # T√≠nh th·ªùi gian quay, c·ªông v√†o t·ªïng
        angle_cost = (Constant.obtuse_or_right * (b1 + b3) + Constant.acute * b2) * count[i + 1]
        total_angle_cost += angle_cost

    # H√†m m·ª•c ti√™u
    obj = model.addVar(lb=0, ub=GRB.INFINITY, vtype=GRB.CONTINUOUS)
    model.addConstr(obj == sqrt + total_angle_cost)
    model.setObjective(obj, GRB.MINIMIZE)
    # model.setObjective(0, sense=GRB.MINIMIZE)

    # C√°c r√†ng bu·ªôc
    # M·ªói b∆∞·ªõc th·ª© k, ch·ªçn ƒë√∫ng m·ªôt ƒë·ªânh
    for k in range(1, N + 1):
        model.addConstr(gp.quicksum([x[i, j, k] for i, j in points_list]) == 1)

    # M·ªói ƒë·ªânh (i, j) xu·∫•t hi·ªán nhi·ªÅu nh·∫•t 1 l·∫ßn
    for i, j in points_list:
        model.addConstr(gp.quicksum([x[i, j, k] for k in range(1, N + 1)]) <= 1)

    """
    V·∫•n ƒë·ªÅ ti·∫øp theo l√† t√≠nh g√≥c trong tr∆∞·ªùng h·ª£p c√≥ ba ƒë·ªânh th·∫≥ng h√†ng, ·ªü
    ƒë√¢y g√≥c s·∫Ω b·∫±ng 0, ho·∫∑c 180 ƒë·ªô.
    H∆∞·ªõng 1: Th√™m ƒëi·ªÅu ki·ªán ƒë·ªÉ lo·∫°i b·ªè ba ƒë·ªânh th·∫≥ng h√†ng.
    H∆∞·ªõng 2: X·ª≠ l√Ω g√≥c ri√™ng bi·ªát (ch√∫ √Ω tr∆∞·ªùng h·ª£p 180 ƒë·ªô)???
    """

    # H∆∞·ªõng 1: Kh√¥ng cho ph√©p ba ƒë·ªânh li√™n ti·∫øp th·∫≥ng h√†ng
    # link: https://or.stackexchange.com/questions/7726/no-not-equals-constraint-in-gurobi
    """
    If you want x1 ‚â† x2, you can linearize |x1 - x2| ‚â• ùúÄ, where ùúÄ
    is your tolerance.
    You can do this by introducing a boolean variable y and by imposing:
    x1 - x2 ‚â§ -ùúÄ + My and x1 - x2 ‚â• ùúÄ - (1 - y)M,
    where M is the smallest large constant you can think of.
    For integer formulations, ùúÄ = 1 and M = (max of x1) - (min of x2) + 1
    """
    for i in range(N - 2):
        check_collinear = vectors_list[i][0] * vectors_list[i + 1][1] - vectors_list[i][1] * vectors_list[i + 1][0]
        # ƒêi·ªÅu ki·ªán: 'check_collinear' kh√°c 0. Tham kh·∫£o link 
        # (l∆∞u √Ω: check_collinear l√† m·ªôt s·ªë nguy√™n)
        b = model.addVar(vtype=GRB.BINARY)
        model.addConstr(check_collinear <= -1 + M*b)
        model.addConstr(check_collinear >= 1 - M*(1 - b))

    # To·∫° ƒë·ªô ƒë·ªânh ƒë·∫ßu, cu·ªëi
    model.addConstr(x[start[0],start[1],1] == 1)
    model.addConstr(x[target[0],target[1],N] == 1)

    # ƒêi·ªÅu ki·ªán kh√¥ng ch·∫°m t∆∞·ªùng, ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc b·∫±ng m·ªôt b∆∞·ªõc ri√™ng bi·ªát
    for i, j in points_list:
        unreachable_points = cac_dinh[f"{i}_{j}"]
        for k in range(1, N):
            # M√¥ t·∫£ ƒëi·ªÅu ki·ªán: N·∫øu x[i, j, k] = 1 th√¨ t·ªïng c√°c x[i', j', k + 1] b·∫±ng 0,
            # v·ªõi (i', j') l√† m·ªôt ƒë·ªânh trong 'unreachable_points' c·ªßa (i, j)
            model.addConstr(x[i, j, k] + gp.quicksum([x[point[0], point[1], k + 1] for point in unreachable_points]) <= 1)

    # C√°c ƒëi·ªÅu ki·ªán sau l√† c√°c ƒëi·ªÅu ki·ªán lu√¥n ƒë√∫ng, nh∆∞ng ch√∫ng c√≥ ·∫£nh h∆∞·ªüng
    # ƒë·∫øn qu√° tr√¨nh gi·∫£i (theo c√°ch t·ªët ho·∫∑c x·∫•u). V√¨ th·∫ø, h√£y th·ª≠ th√™m ho·∫∑c
    # b·ªè c√°c ƒëi·ªÅu ki·ªán n√†y trong qu√° tr√¨nh gi·∫£i.

    # C√≥ √≠t nh·∫•t 2 b∆∞·ªõc
    # model.addConstr(count[2] == 1)

    # Ch·∫∑n tr√™n ƒë√£ bi·∫øt cho h√†m m·ª•c ti√™u (n·∫øu c√≥)
    # model.addConstr(obj <= )

    # T√¨m nghi·ªám t·ªëi ∆∞u
    model.optimize()

    # In ra th√¥ng tin v·ªÅ qu√£ng ƒë∆∞·ªùng, d√πng cho b∆∞·ªõc hai
    if model.status == GRB.OPTIMAL or model.status == GRB.SOLUTION_LIMIT:
        return True, model.ObjVal
    else: return False, 0

def solve_for_solution_with_bounded_steps(size, index, step_bound, status = "optimal"):
    """
    Solve given maze for solution, optimal if 'status' = "optimal", else
    an arbitrary feasible solution.
    """
    # Thi·∫øt l·∫≠p m√¥ h√¨nh
    model = gp.Model()

    # Look for any feasible solution if 'status' = "feasible"
    if status == "feasible": model.params.SolutionLimit = 1

    # C·∫ßn ƒë·ªÉ l√†m ph√©p nh√¢n ba bi·∫øn
    model.params.NonConvex = 2

    # L·∫•y th√¥ng tin
    nodes_path = Path(__file__).parent/"Unreachable_nodes"/f"Size{size}"/f"sample{index}.json"
    grid_path = Path(__file__).parent/"Samples"/f"Size{size}"/f"sample{index}.json"
    with open(nodes_path, "r") as f:
        cac_dinh = json.load(f)
    with open(grid_path, "r") as f:
        maze = json.load(f)
    start = maze["start"]
    target = maze["target"]

    # L·∫•y t·∫≠p c·∫°nh l√† t∆∞·ªùng
    edges = maze["edges"]

    redundant_points = set()
    points_list = [[i, j] for i in range(1, size + 1) for j in range(1, size + 1)]
    # Lo·∫°i nh·ªØng ƒë·ªânh th·ª´a
    for edge in edges:
        points_to_remove = get_points_between(edge[0], edge[1])
        for point in points_to_remove:
            try:
                points_list.remove(point)
            except:
                pass

            # Th√™m ƒë·ªânh th·ª´a v√†o m·ªôt danh s√°ch
            redundant_points.add(tuple(point))
    redundant_points = list(redundant_points)

    # Check validity of number of steps
    max_step = size**2 - len(redundant_points)
    if step_bound > max_step: 
        raise ValueError(f"S·ªë b∆∞·ªõc v∆∞·ª£t qu√° s·ªë b∆∞·ªõc t·ªëi ƒëa: {max_step}")

    n = size # cho g·ªçn trong m√¥ h√¨nh

    # H·∫±ng s·ªë ch·∫∑n tr√™n, d√πng cho c√°c r√†ng bu·ªôc "n·∫øu, th√¨"
    M = 2*n**2 + 10

    # Ch·∫∑n tr√™n cho s·ªë b∆∞·ªõc t·ªëi ƒëa
    N = step_bound

    # L·∫≠p m√¥ h√¨nh
    model = gp.Model()
    x = np.empty((n+1, n+1, N+1), dtype=object)
    for i in range(1,n+1):
        for j in range(1,n+1):
            for k in range(1, N+1):
                x[i,j,k] = model.addVar(vtype=GRB.BINARY)

    # T·∫•t c·∫£ c√°c ƒë·ªânh trong redundant_points ƒë·ªÅu b·∫±ng 0
    for k in range(1, N + 1):
        for i, j in redundant_points:
            model.addConstr(x[i, j, k] == 0)

    # T√≠nh t·ªça ƒë·ªô a, b c·ªßa ƒë·ªânh th·ª© k
    a = np.empty((N+1), dtype=object)
    b = np.empty((N+1), dtype=object)
    for k in range(1, N+1):
        a[k] = model.addVar(lb=0, ub=n, vtype= GRB.CONTINUOUS)
        model.addConstr(gp.quicksum([x[i, j, k]*i for i in range(1,n+1) for j in range(1,n+1)]) == a[k])
        b[k] = model.addVar(lb=0, ub=n, vtype= GRB.CONTINUOUS)
        model.addConstr(gp.quicksum([x[i, j, k]*j for i in range(1,n+1) for j in range(1,n+1)]) == b[k])

    # Bi·∫øn ki·ªÉm tra xem ƒë·ªânh th·ª© k c√≥ ƒë∆∞·ª£c ch·ªçn hay kh√¥ng
    count = np.empty(N + 1, dtype=object)
    for k in range(1, N + 1):
        count[k] = model.addVar(vtype=GRB.BINARY)
        model.addConstr(count[k] == gp.quicksum([x[i, j, k] for i, j in points_list]))

    # T√≠nh qu√£ng ƒë∆∞·ªùng
    # Kh√¥ng nh√¢n ƒë∆∞·ª£c ba l·∫ßn
    step_length_squared = np.empty(N, dtype=object)
    true_step_length_squared = np.empty(N, dtype=object)
    sqrt_var = np.empty(N, dtype=object)
    for k in range(1, N):
        step_length_squared[k] = model.addVar(lb=0, ub=GRB.INFINITY, vtype=GRB.INTEGER)
        model.addConstr(step_length_squared[k] == (a[k+1] - a[k])**2 + (b[k+1] - b[k])**2)
        true_step_length_squared[k] = model.addVar(lb=0, ub=GRB.INFINITY, vtype=GRB.INTEGER)
        model.addConstr(true_step_length_squared[k] == step_length_squared[k] * count[k + 1])
        sqrt_var[k] = model.addVar(lb=0, ub=GRB.INFINITY, vtype=GRB.CONTINUOUS, name="sqrt_var")
        model.addConstr(sqrt_var[k] * sqrt_var[k] == true_step_length_squared[k], "sqrt_constr")
    sqrt = gp.quicksum([sqrt_var[k] for k in range(1, N)])

    # Danh s√°ch c√°c v√©c-t∆° gi·ªØa hai ƒë·ªânh li√™n ti·∫øp
    vectors_list = []
    for k in range(1, N):
        vectors_list.append([a[k + 1] - a[k], b[k + 1] - b[k]])

    # T√≠nh t√≠ch v√¥ h∆∞·ªõng, qua ƒë√≥ x√°c ƒë·ªãnh gi√° tr·ªã c·ªßa g√≥c quay.
    # D√πng lu√¥n t·ª´ vectors_list, tr√°nh t√≠nh l·∫°i nhi·ªÅu l·∫ßn trong h√†m dot_product.
    # H∆°n n·ªØa vectors_list c√≤n ƒë∆∞·ª£c d√πng trong ƒëi·ªÅu ki·ªán kh√¥ng th·∫≥ng h√†ng ·ªü sau.
    total_angle_cost = 0
    for i in range(2, N):
        vector1, vector2 = vectors_list[i - 2], vectors_list[i - 1]
        dot_product = vector1[0]*vector2[0] + vector1[1]*vector2[1]
        # angle[i] = model.addVar(lb=Constant.obtuse_or_right, ub=Constant.acute, vtype=GRB.CONTINUOUS)
        b1 = model.addVar(vtype = GRB.BINARY, name = "b1") # = 1 n·∫øu dot_product > 0, = 0 n·∫øu ng∆∞·ª£c l·∫°i
        b2 = model.addVar(vtype = GRB.BINARY, name = "b2") # = 1 n·∫øu dot_product < 0, = 0 n·∫øu ng∆∞·ª£c l·∫°i
        b3 = model.addVar(vtype = GRB.BINARY, name = "b3") # = 1 n·∫øu dot_product = 0

        # Ch·ªâ ch√≠nh x√°c ho√° b1, b2. ƒêi·ªÅu ki·ªán sau s·∫Ω l√†m ch√≠nh x√°c b3.
        model.addConstr(b1+b2+b3 == 1)
        model.addConstr(dot_product <= M*b1)
        model.addConstr(dot_product >= (M + 1)*(b1 - 1) + 1)
        model.addConstr(dot_product >= -M*b2)
        model.addConstr(dot_product <= (M + 1)*(1 - b2) - 1)

        # T√≠nh th·ªùi gian quay, c·ªông v√†o t·ªïng
        angle_cost = (Constant.obtuse_or_right * (b1 + b3) + Constant.acute * b2) * count[i + 1]
        total_angle_cost += angle_cost

    # H√†m m·ª•c ti√™u
    obj = model.addVar(lb=0, ub=GRB.INFINITY, vtype=GRB.CONTINUOUS)
    model.addConstr(obj == sqrt + total_angle_cost)
    model.setObjective(obj, GRB.MINIMIZE)
    # model.setObjective(0, sense=GRB.MINIMIZE)

    # C√°c r√†ng bu·ªôc
    # M·ªói b∆∞·ªõc th·ª© k, ch·ªçn nhi·ªÅu nh·∫•t m·ªôt ƒë·ªânh
    for k in range(1, N + 1):
        model.addConstr(count[k] <= 1)

    # M·ªói ƒë·ªânh (i, j) xu·∫•t hi·ªán nhi·ªÅu nh·∫•t m·ªôt l·∫ßn
    for i, j in points_list:
        model.addConstr(gp.quicksum([x[i, j, k] for k in range(1, N + 1)]) <= 1)

    # N·∫øu ƒë·ªânh th·ª© k ƒë∆∞·ª£c ch·ªçn th√¨ t·∫•t c·∫£ c√°c ƒë·ªânh tr∆∞·ªõc ƒë√≥ c≈©ng ƒë∆∞·ª£c ch·ªçn
    for k in range(1, N):
        model.addConstr(count[k] >= count[k + 1])

    for i in range(N - 2):
        check_collinear = vectors_list[i][0] * vectors_list[i + 1][1] - vectors_list[i][1] * vectors_list[i + 1][0]
        # ƒêi·ªÅu ki·ªán: 'check_collinear' kh√°c 0. Tham kh·∫£o link https://or.stackexchange.com/questions/7726/no-not-equals-constraint-in-gurobi
        # (l∆∞u √Ω: check_collinear l√† m·ªôt s·ªë nguy√™n)
        b = model.addVar(vtype=GRB.BINARY)
        # L∆∞u √Ω: Quan t√¢m ƒë·∫øn ƒë·ªânh th·ª© i + 3. N·∫øu n√≥ kh√¥ng ƒë∆∞·ª£c ch·ªçn, ƒëi·ªÅu ki·ªán n√†y lu√¥n ƒë∆∞·ª£c tho·∫£ m√£n v·ªõi b = 0
        model.addConstr(check_collinear - M*(1 - count[i + 3]) <= -1 + M*b)
        model.addConstr(check_collinear >= 1 - M*(1 - b))

    # To·∫° ƒë·ªô ƒë·ªânh ƒë·∫ßu, cu·ªëi
    # L∆∞u √Ω v·ªÅ ƒë·ªânh cu·ªëi!
    model.addConstr(x[start[0],start[1],1] == 1)  
    model.addConstr(gp.quicksum([x[target[0], target[1], k] for k in range(1, N + 1)]) == 1)

    # V·ªã tr√≠ c·ªßa ƒë·ªânh cu·ªëi ph·∫£i th·ª±c s·ª± l√† v·ªã tr√≠ cu·ªëi
    model.addConstr(gp.quicksum([x[target[0], target[1], k]*k for k in range(1, N + 1)]) == gp.quicksum([count[k] for k in range(1, N + 1)]))

    # ƒêi·ªÅu ki·ªán kh√¥ng ch·∫°m t∆∞·ªùng, ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc b·∫±ng m·ªôt b∆∞·ªõc ri√™ng bi·ªát
    for i, j in points_list:
        unreachable_points = cac_dinh[f"{i}_{j}"]
        for k in range(1, N):
            # M√¥ t·∫£ ƒëi·ªÅu ki·ªán: N·∫øu x[i, j, k] = 1 th√¨ t·ªïng c√°c x[i', j', k + 1] b·∫±ng 0,
            # v·ªõi (i', j') l√† m·ªôt ƒë·ªânh trong 'unreachable_points' c·ªßa (i, j)
            model.addConstr(x[i, j, k] + gp.quicksum([x[point[0], point[1], k + 1] for point in unreachable_points]) <= 1)

    # C√°c ƒëi·ªÅu ki·ªán sau l√† c√°c ƒëi·ªÅu ki·ªán lu√¥n ƒë√∫ng, nh∆∞ng ch√∫ng c√≥ ·∫£nh h∆∞·ªüng
    # ƒë·∫øn qu√° tr√¨nh gi·∫£i (theo c√°ch t·ªët ho·∫∑c x·∫•u). V√¨ th·∫ø, h√£y th·ª≠ th√™m ho·∫∑c
    # b·ªè c√°c ƒëi·ªÅu ki·ªán n√†y trong qu√° tr√¨nh gi·∫£i.

    # C√≥ √≠t nh·∫•t 2 b∆∞·ªõc
    # model.addConstr(count[2] == 1)

    # Ch·∫∑n tr√™n ƒë√£ bi·∫øt cho h√†m m·ª•c ti√™u (n·∫øu c√≥)
    # model.addConstr(obj <= )

    model.optimize()

    # In ra th√¥ng tin v·ªÅ qu√£ng ƒë∆∞·ªùng, d√πng cho b∆∞·ªõc hai
    if model.status == GRB.OPTIMAL or model.status == GRB.SOLUTION_LIMIT:
        return True, model.ObjVal
    else: return False, 0   

def solve_maze(size, index, bound_for_feasibility = None, status_for_feasibility = "optimal", method: int = 2):
    """
    Solve given maze.
    NOTE:
    - If bound_for_feasibility = None, model will be constructed with
    default upper bound for maximum number of vertices, which may result
    in a model with O(size**4) constraints, and this is too much for
    size > 10.
    - Else, the process will start searching for a feasible solution with
    an upper bound of vertices given by 'bound_for_feasibility', using the 
    fixed-step version ('method' = 1) or bounded step version ('method' = 2).
    If no feasible solution is found, the process is stopped, otherwise
    there will be a much better bound for maximum number of vertices
    obtained from the feasible objective value found above, thereby 
    decreasing the size of the final model, raising solvability.
    """
    # Thi·∫øt l·∫≠p m√¥ h√¨nh
    model = gp.Model()

    # C·∫ßn ƒë·ªÉ l√†m ph√©p nh√¢n ba bi·∫øn
    model.params.NonConvex = 2

    # L·∫•y th√¥ng tin
    nodes_path = Path(__file__).parent/"Unreachable_nodes"/f"Size{size}"/f"sample{index}.json"
    grid_path = Path(__file__).parent/"Samples"/f"Size{size}"/f"sample{index}.json"
    with open(nodes_path, "r") as f:
        cac_dinh = json.load(f)
    with open(grid_path, "r") as f:
        maze = json.load(f)
    start = maze["start"]
    target = maze["target"]

    # L·∫•y t·∫≠p c·∫°nh l√† t∆∞·ªùng
    edges = maze["edges"]

    redundant_points = set()
    points_list = [[i, j] for i in range(1, size + 1) for j in range(1, size + 1)]
    # Lo·∫°i nh·ªØng ƒë·ªânh th·ª´a
    for edge in edges:
        points_to_remove = get_points_between(edge[0], edge[1])
        for point in points_to_remove:
            try:
                points_list.remove(point)
            except:
                pass

            # Th√™m ƒë·ªânh th·ª´a v√†o m·ªôt danh s√°ch
            redundant_points.add(tuple(point))
    redundant_points = list(redundant_points)

    # ƒê·∫ßu ti√™n, t√¨m m·ªôt nghi·ªám t·ªëi ∆∞u cho s·ªë b∆∞·ªõc c·ª• th·ªÉ, l√† m·ªôt nghi·ªám ch·∫•p nh·∫≠n ƒë∆∞·ª£c
    # cho b√†i to√°n v·ªõi s·ªë b∆∞·ªõc ch∆∞a bi·∫øt. T·ª´ gi√° tr·ªã h√†m m·ª•c ti√™u ·ªü ƒë√¢y, ta
    # thu ƒë∆∞·ª£c m·ªôt ch·∫∑n tr√™n cho s·ªë b∆∞·ªõc t·ªëi ƒëa.
    max_step = size**2 - len(redundant_points)
    if bound_for_feasibility > max_step:
        raise ValueError(f"S·ªë b∆∞·ªõc v∆∞·ª£t qu√° s·ªë b∆∞·ªõc t·ªëi ƒëa: {max_step}")

    elif bound_for_feasibility == None: N = max_step

    # Ch·∫∑n tr√™n cho s·ªë b∆∞·ªõc t·ªëi ƒëa, t·ª´ vi·ªác ƒë·ªô d√†i m·ªói ƒëo·∫°n √≠t nh·∫•t l√† 1 ƒë∆°n
    # v·ªã, v√† v√¨ kh√¥ng c√≥ ba ƒë·ªânh li√™n ti·∫øp th·∫≥ng h√†ng, m·ªói b∆∞·ªõc ƒëi ƒë·ªÅu bao
    # g·ªìm m·ªôt l·∫ßn quay. Do ƒë√≥, m·ªói b∆∞·ªõc ƒëi s·∫Ω t·ªën √≠t nh·∫•t 1 + 3.75 = 4.75 ƒëvtg.ƒëvtg
    # C√≥ N - 1 b∆∞·ªõc ƒëi nh∆∞ v·∫≠y.
    else:
        print(f"Begin step one: Finding a {status_for_feasibility} solution within range of {bound_for_feasibility} vertices")
        if method == 1:
            count = 2
            for step in range(2, bound_for_feasibility + 1):
                info = solve_maze_with_given_step(size, index, step, status_for_feasibility)
                if info[0]:
                    N = int(info[1]/4.75) + 2
                    print(f"Obtained a bound for maximum number of vertices: {N}")
                    print(f"Begin step two: Solving given maze with maximum {N} vertices")
                    break
                count += 1
            if count == bound_for_feasibility + 1:
                print(f"No feasible solution found with given range of {bound_for_feasibility} vertices")
                return None
        elif method == 2:
            info = solve_for_solution_with_bounded_steps(size, index, bound_for_feasibility, status_for_feasibility)
            if info[0]:
                N = int(info[1]/4.75) + 2
                print(f"Obtained a bound for maximum number of vertices: {N}")
                print(f"Begin step two: Solving given maze with maximum {N} vertices")
            else:
                print(f"No feasible solution found with given range of {bound_for_feasibility} vertices")
                return None

    n = size # cho g·ªçn trong m√¥ h√¨nh

    # H·∫±ng s·ªë ch·∫∑n tr√™n, d√πng cho c√°c r√†ng bu·ªôc "n·∫øu, th√¨"
    M = 2*n**2 + 10

    # L·∫≠p m√¥ h√¨nh
    model = gp.Model()
    x = np.empty((n+1, n+1, N+1), dtype=object)
    for i in range(1,n+1):
        for j in range(1,n+1):
            for k in range(1, N+1):
                x[i,j,k] = model.addVar(vtype=GRB.BINARY)

    # T·∫•t c·∫£ c√°c ƒë·ªânh trong redundant_points ƒë·ªÅu b·∫±ng 0
    for k in range(1, N + 1):
        for i, j in redundant_points:
            model.addConstr(x[i, j, k] == 0)

    # T√≠nh t·ªça ƒë·ªô a, b c·ªßa ƒë·ªânh th·ª© k
    a = np.empty((N+1), dtype=object)
    b = np.empty((N+1), dtype=object)
    for k in range(1, N+1):
        a[k] = model.addVar(lb=0, ub=n, vtype= GRB.CONTINUOUS)
        model.addConstr(gp.quicksum([x[i, j, k]*i for i in range(1,n+1) for j in range(1,n+1)]) == a[k])
        b[k] = model.addVar(lb=0, ub=n, vtype= GRB.CONTINUOUS)
        model.addConstr(gp.quicksum([x[i, j, k]*j for i in range(1,n+1) for j in range(1,n+1)]) == b[k])

    # Bi·∫øn ki·ªÉm tra xem ƒë·ªânh th·ª© k c√≥ ƒë∆∞·ª£c ch·ªçn hay kh√¥ng
    count = np.empty(N + 1, dtype=object)
    for k in range(1, N + 1):
        count[k] = model.addVar(vtype=GRB.BINARY)
        model.addConstr(count[k] == gp.quicksum([x[i, j, k] for i, j in points_list]))

    # T√≠nh qu√£ng ƒë∆∞·ªùng
    # Kh√¥ng nh√¢n ƒë∆∞·ª£c ba l·∫ßn
    step_length_squared = np.empty(N, dtype=object)
    true_step_length_squared = np.empty(N, dtype=object)
    sqrt_var = np.empty(N, dtype=object)
    for k in range(1, N):
        step_length_squared[k] = model.addVar(lb=0, ub=GRB.INFINITY, vtype=GRB.INTEGER)
        model.addConstr(step_length_squared[k] == (a[k+1] - a[k])**2 + (b[k+1] - b[k])**2)
        true_step_length_squared[k] = model.addVar(lb=0, ub=GRB.INFINITY, vtype=GRB.INTEGER)
        model.addConstr(true_step_length_squared[k] == step_length_squared[k] * count[k + 1])
        sqrt_var[k] = model.addVar(lb=0, ub=GRB.INFINITY, vtype=GRB.CONTINUOUS, name="sqrt_var")
        model.addConstr(sqrt_var[k] * sqrt_var[k] == true_step_length_squared[k], "sqrt_constr")
    sqrt = gp.quicksum([sqrt_var[k] for k in range(1, N)])

    # Danh s√°ch c√°c v√©c-t∆° gi·ªØa hai ƒë·ªânh li√™n ti·∫øp
    vectors_list = []
    for k in range(1, N):
        vectors_list.append([a[k + 1] - a[k], b[k + 1] - b[k]])

    # T√≠nh t√≠ch v√¥ h∆∞·ªõng, qua ƒë√≥ x√°c ƒë·ªãnh gi√° tr·ªã c·ªßa g√≥c quay.
    # D√πng lu√¥n t·ª´ vectors_list, tr√°nh t√≠nh l·∫°i nhi·ªÅu l·∫ßn trong h√†m dot_product.
    # H∆°n n·ªØa vectors_list c√≤n ƒë∆∞·ª£c d√πng trong ƒëi·ªÅu ki·ªán kh√¥ng th·∫≥ng h√†ng ·ªü sau.
    total_angle_cost = 0
    for i in range(2, N):
        vector1, vector2 = vectors_list[i - 2], vectors_list[i - 1]
        dot_product = vector1[0]*vector2[0] + vector1[1]*vector2[1]
        # angle[i] = model.addVar(lb=Constant.obtuse_or_right, ub=Constant.acute, vtype=GRB.CONTINUOUS)
        b1 = model.addVar(vtype = GRB.BINARY, name = "b1") # = 1 n·∫øu dot_product > 0, = 0 n·∫øu ng∆∞·ª£c l·∫°i
        b2 = model.addVar(vtype = GRB.BINARY, name = "b2") # = 1 n·∫øu dot_product < 0, = 0 n·∫øu ng∆∞·ª£c l·∫°i
        b3 = model.addVar(vtype = GRB.BINARY, name = "b3") # = 1 n·∫øu dot_product = 0

        # Ch·ªâ ch√≠nh x√°c ho√° b1, b2. ƒêi·ªÅu ki·ªán sau s·∫Ω l√†m ch√≠nh x√°c b3.
        model.addConstr(b1+b2+b3 == 1)
        model.addConstr(dot_product <= M*b1)
        model.addConstr(dot_product >= (M + 1)*(b1 - 1) + 1)
        model.addConstr(dot_product >= -M*b2)
        model.addConstr(dot_product <= (M + 1)*(1 - b2) - 1)

        # T√≠nh th·ªùi gian quay, c·ªông v√†o t·ªïng
        angle_cost = (Constant.obtuse_or_right * (b1 + b3) + Constant.acute * b2) * count[i + 1]
        total_angle_cost += angle_cost

    # H√†m m·ª•c ti√™u
    obj = model.addVar(lb=0, ub=GRB.INFINITY, vtype=GRB.CONTINUOUS)
    model.addConstr(obj == sqrt + total_angle_cost)
    model.setObjective(obj, GRB.MINIMIZE)
    # model.setObjective(0, sense=GRB.MINIMIZE)

    # C√°c r√†ng bu·ªôc
    # M·ªói b∆∞·ªõc th·ª© k, ch·ªçn nhi·ªÅu nh·∫•t m·ªôt ƒë·ªânh
    for k in range(1, N + 1):
        model.addConstr(count[k] <= 1)

    # M·ªói ƒë·ªânh (i, j) xu·∫•t hi·ªán nhi·ªÅu nh·∫•t m·ªôt l·∫ßn
    for i, j in points_list:
        model.addConstr(gp.quicksum([x[i, j, k] for k in range(1, N + 1)]) <= 1)

    # N·∫øu ƒë·ªânh th·ª© k ƒë∆∞·ª£c ch·ªçn th√¨ t·∫•t c·∫£ c√°c ƒë·ªânh tr∆∞·ªõc ƒë√≥ c≈©ng ƒë∆∞·ª£c ch·ªçn
    for k in range(1, N):
        model.addConstr(count[k] >= count[k + 1])

    for i in range(N - 2):
        check_collinear = vectors_list[i][0] * vectors_list[i + 1][1] - vectors_list[i][1] * vectors_list[i + 1][0]
        # ƒêi·ªÅu ki·ªán: 'check_collinear' kh√°c 0. Tham kh·∫£o link https://or.stackexchange.com/questions/7726/no-not-equals-constraint-in-gurobi
        # (l∆∞u √Ω: check_collinear l√† m·ªôt s·ªë nguy√™n)
        b = model.addVar(vtype=GRB.BINARY)
        # L∆∞u √Ω: Quan t√¢m ƒë·∫øn ƒë·ªânh th·ª© i + 3. N·∫øu n√≥ kh√¥ng ƒë∆∞·ª£c ch·ªçn, ƒëi·ªÅu ki·ªán n√†y lu√¥n ƒë∆∞·ª£c tho·∫£ m√£n v·ªõi b = 0
        model.addConstr(check_collinear - M*(1 - count[i + 3]) <= -1 + M*b)
        model.addConstr(check_collinear >= 1 - M*(1 - b))

    # To·∫° ƒë·ªô ƒë·ªânh ƒë·∫ßu, cu·ªëi
    # L∆∞u √Ω v·ªÅ ƒë·ªânh cu·ªëi!
    model.addConstr(x[start[0],start[1],1] == 1)  
    model.addConstr(gp.quicksum([x[target[0], target[1], k] for k in range(1, N + 1)]) == 1)

    # V·ªã tr√≠ c·ªßa ƒë·ªânh cu·ªëi ph·∫£i th·ª±c s·ª± l√† v·ªã tr√≠ cu·ªëi
    model.addConstr(gp.quicksum([x[target[0], target[1], k]*k for k in range(1, N + 1)]) == gp.quicksum([count[k] for k in range(1, N + 1)]))

    # ƒêi·ªÅu ki·ªán kh√¥ng ch·∫°m t∆∞·ªùng, ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc b·∫±ng m·ªôt b∆∞·ªõc ri√™ng bi·ªát
    for i, j in points_list:
        unreachable_points = cac_dinh[f"{i}_{j}"]
        for k in range(1, N):
            # M√¥ t·∫£ ƒëi·ªÅu ki·ªán: N·∫øu x[i, j, k] = 1 th√¨ t·ªïng c√°c x[i', j', k + 1] b·∫±ng 0,
            # v·ªõi (i', j') l√† m·ªôt ƒë·ªânh trong 'unreachable_points' c·ªßa (i, j)
            model.addConstr(x[i, j, k] + gp.quicksum([x[point[0], point[1], k + 1] for point in unreachable_points]) <= 1)

    # C√°c ƒëi·ªÅu ki·ªán sau l√† c√°c ƒëi·ªÅu ki·ªán lu√¥n ƒë√∫ng, nh∆∞ng ch√∫ng c√≥ ·∫£nh h∆∞·ªüng
    # ƒë·∫øn qu√° tr√¨nh gi·∫£i (theo c√°ch t·ªët ho·∫∑c x·∫•u). V√¨ th·∫ø, h√£y th·ª≠ th√™m ho·∫∑c
    # b·ªè c√°c ƒëi·ªÅu ki·ªán n√†y trong qu√° tr√¨nh gi·∫£i.

    # C√≥ √≠t nh·∫•t 2 b∆∞·ªõc
    # model.addConstr(count[2] == 1)

    # Ch·∫∑n tr√™n ƒë√£ bi·∫øt cho h√†m m·ª•c ti√™u (n·∫øu c√≥)
    # model.addConstr(obj <= solve_maze_with_given_step(size, index, step)[1]+0.01)

    model.optimize()
    # In ra th√¥ng tin v·ªÅ qu√£ng ƒë∆∞·ªùng
    if model.status == GRB.OPTIMAL:
        print(f"Optimal objective value: {model.objVal}")
        for k in range(1, N + 1):
            if count[k].x == 0: break
            for i, j in points_list:
                if x[i, j, k].x == 1:
                    print(f"{k}_th vertex: ({i}, {j})")

solve_maze(20, 1, 20, "feasible", 1)